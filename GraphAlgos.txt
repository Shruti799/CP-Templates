///////////////   BFS ALGORITHM   ///////////////
// TC = O(N)+O(2E) : SC = O(N) //

 vector<int> bfsOfGraph(int V, vector<int> adj[]){
        queue<int> q;
        vector<int> bfs;
        int visited[V]={0};
        q.push(0);
        visited[0]=1;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            bfs.push_back(node);
            for(auto it : adj[node]){
                if(!visited[it]){
                    q.push(it);
                    visited[it]=1;
                }
            }
        }
        return bfs;
 }


 ///////////////   DFS ALGORITHM   //////////////
 // TC = O(N)+O(2E) : SC = O(N) //
 
    void dfs(int node,vector<int> &res,int visited[],vector<int> adj[]){
        res.push_back(node);
        visited[node]=1;
        for(auto it : adj[node]){
            if(!visited[it]){
                dfs(it,res,visited,adj);
            }
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        int visited[V]={0};
        int start=0;
        vector<int> res;
        dfs(start,res,visited,adj);
        return res;
    }